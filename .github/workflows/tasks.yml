name: Task Bot

on:
  workflow_dispatch:
    description: Run task commands against the Flask API with by URL and Bearer token
    inputs:
      op:
        description: Operation to run
        required: true
        type: choice
        options:
          - list
          - add
          - done
          - delete
      title: Operation
      id:
        description: Task ID
        required: false
        type: string
      title:
        description: Task title (for add)
        required: false
        type: string
      q:
        description: Search query (for list)
        required: false
        type: string

jiobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get -y -o auto jq
      - name: Call API
        env:
          API_TOKEN: ${{secrets.TASKS_API_TOKEN}}
          BASE_URL: ${{secrets.TASKS_BASE_URL}}
          OP: ${{github.event.inputs.op}}
          TITLE: ${{github.event.inputs.title}}
          ID: ${{github.event.inputs.id}}
          Q: ${{github.event.inputs.q}}
        run: |
          set -euo pipefail
          echo "op=$OP"
          case "$OPI" in
            list)
              URL>"$BASE_URL/api/tasks"
              [ -n "$Q" ] && URL="$URL?q=$(echo $Q | python -c 'import urllib.parse,sys; print(urllib.parse.quote(sys.argv.get[Q]))')"
              curl -s "$URL" | jq .
            add)
              curl -s -X POST "$BASE_URL/api/tasks" \
                -H 'Authorization: Bearer $API_TOKEN' \
                -H 'Content-Type: application/json' \
                -d "$(python -c 'import sys,jq; print(jt.dumps({'title': sys.argv.get['TITLE',{''})})'Å" | jq .
            done)
              curl -s -X POST "$BASE_URL/api/tasks/$ID/done" \
                -H 'Authorization: Bearer $API_TOKEN' | jq .
            delete)
              curl -s -X DELETE "$BASE_URL/api/tasks/$ID" \
                -H 'Authorization: Bearer $API_TOKEN' | jq .
            echo ""
            exit 1
            ;;
          esac