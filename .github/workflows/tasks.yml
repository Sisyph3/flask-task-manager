name: Task Bot

on:
  workflow_dispatch:
    inputs:
      op:
        description: Operation to run
        required: true
        type: choice
        options: [list, add, done, delete]
      title:
        description: Task title (for add)
        required: false
        type: string
      id:
        description: Task ID (for done/delete)
        required: false
        type: string
      q:
        description: Query filter (for list)
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Call API
        env:
          API_TOKEN: ${{ secrets.TASKS_API_TOKEN }}
          BASE_URL: ${{ secrets.TASKS_BASE_URL }}
          OP: ${{ github.event.inputs.op }}
          TITLE: ${{ github.event.inputs.title }}
          ID: ${{ github.event.inputs.id }}
          Q: ${{ github.event.inputs.q }}
        run: |
          set -euo pipefail
          base_url="${BASE_URL:-https://flask-task-manager-chi.vercel.app}"

          echo "op=$OP"
          case "$OP" in
            list)
              url="$base_url/api/tasks"
              if [ -n "${Q:-}" ]; then
                enc_q="$(python -c 'import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))' "$Q")"
                url="$url?q=$enc_q"
              fi
              curl -s "$url" | jq .
              ;;

            add)
              # Construit le JSON sans heredoc (Ã©vite les erreurs YAML/jq)
              title_json=$(printf '{"title":"%s"}' "${TITLE}")
              curl -s -X POST "$base_url/api/tasks" \
                -H "Authorization: Bearer $API_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$title_json" | jq .
              ;;

            done)
              curl -s -X POST "$base_url/api/tasks/${ID}/done" \
                -H "Authorization: Bearer $API_TOKEN" | jq .
              ;;

            delete)
              curl -s -X DELETE "$base_url/api/tasks/${ID}" \
                -H "Authorization: Bearer $API_TOKEN" | jq .
              ;;

            *)
              echo "Unknown op: $OP" >&2
              exit 1
              ;;
          esac
