name: Task Bot (IssueOps)

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write

jobs:
  handle:
    if: ${{ github.event.issue.pull_request == null }}
    runs-on: ubuntu-latest
    steps:
      - name: Parse comment & call API
        env:
          BODY: ${{ github.event.comment.body }}
          API_TOKEN: ${{ secrets.TASKS_API_TOKEN }}
          BASE_URL: ${{ secrets.TASKS_BASE_URL }}
        run: |
          set -euo pipefail
          base_url="${BASE_URL:-https://flask-task-manager-chi.vercel.app}"

          echo "Comment: $BODY"

          respond() {
            # Post a comment back with the result (pretty JSON or message)
            local msg="$1"
            jq -rn --arg body "$msg" '{body:$body}' > body.json
            curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${{ github.event.issue.number }}/comments" \
              -d @body.json >/dev/null
          }

          if [[ "$BODY" =~ ^/task[[:space:]]+add[[:space:]]+(.+)$ ]]; then
            title="${BASH_REMATCH[1]}"
            payload=$(printf '{"title":"%s"}' "$title")
            resp=$(curl -s -X POST "$base_url/api/tasks" \
              -H "Authorization: Bearer $API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$payload")
            respond "‚úÖ **add** ‚Üí\n\`\`\`json\n$(echo "$resp" | jq .)\n\`\`\`"
            exit 0
          fi

          if [[ "$BODY" =~ ^/task[[:space:]]+done[[:space:]]+([0-9]+)$ ]]; then
            id="${BASH_REMATCH[1]}"
            resp=$(curl -s -X POST "$base_url/api/tasks/${id}/done" \
              -H "Authorization: Bearer $API_TOKEN")
            respond "‚úÖ **done $id** ‚Üí\n\`\`\`json\n$(echo "$resp" | jq .)\n\`\`\`"
            exit 0
          fi

          if [[ "$BODY" =~ ^/task[[:space:]]+delete[[:space:]]+([0-9]+)$ ]]; then
            id="${BASH_REMATCH[1]}"
            resp=$(curl -s -X DELETE "$base_url/api/tasks/${id}" \
              -H "Authorization: Bearer $API_TOKEN")
            respond "‚úÖ **delete $id** ‚Üí\n\`\`\`json\n$(echo "$resp" | jq .)\n\`\`\`"
            exit 0
          fi

          if [[ "$BODY" =~ ^/task[[:space:]]+list(?:[[:space:]]+q=(.+))?$ ]]; then
            q="${BASH_REMATCH[1]:-}"
            url="$base_url/api/tasks"
            if [[ -n "$q" ]]; then
              enc_q=$(python -c 'import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))' "$q")
              url="$url?q=$enc_q"
            fi
            resp=$(curl -s "$url")
            respond "üìã **list** ${q:+(q=$q)} ‚Üí\n\`\`\`json\n$(echo "$resp" | jq .)\n\`\`\`"
            exit 0
          fi

          respond "‚ÑπÔ∏è Commandes support√©es :\n- \`/task add <titre>\`\n- \`/task done <id>\`\n- \`/task delete <id>\`\n- \`/task list [q=mot]\`"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
