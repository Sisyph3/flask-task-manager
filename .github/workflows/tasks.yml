name: Tasks IssueOps

on:
  issue_comment:
    types: [created, edited]
  workflow_dispatch:

# Évite les collisions si plusieurs commentaires arrivent en même temps sur la même issue
concurrency:
  group: tasks-issueops-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write

env:
  # Mention à utiliser dans les commentaires
  BOT_HANDLE: "@bot"

  # Base URL + token (déjà configurés dans vos Secrets)
  TASKS_BASE_URL: ${{ secrets.TASKS_BASE_URL }}
  TASKS_API_TOKEN: ${{ secrets.TASKS_API_TOKEN }}

  # Chemins d'API AJUSTABLES selon votre service Flask
  TASKS_LIST_PATH: "/tasks"
  TASKS_ADD_PATH: "/tasks"
  TASKS_DONE_PATH: "/tasks/{id}"     # PATCH {"status":"done"} (fallback POST)
  TASKS_DELETE_PATH: "/tasks/{id}"   # DELETE

jobs:
  issueops:
    name: Parse comment and call Tasks API
    runs-on: ubuntu-latest

    # ⚠️ Ne pas utiliser env.* ici : on ne filtre que par type d'événement.
    if: ${{ github.event_name == 'issue_comment' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Vérifications de base
        run: |
          test -n "${TASKS_BASE_URL}" || (echo "❌ TASKS_BASE_URL manquant (Secret)" && exit 1)
          test -n "${TASKS_API_TOKEN}" || (echo "❌ TASKS_API_TOKEN manquant (Secret)" && exit 1)

      - name: IssueOps via github-script
        uses: actions/github-script@v7
        env:
          GH_ISSUE_NUMBER: ${{ github.event.issue.number }}
          GH_REPO: ${{ github.repository }}
          GH_COMMENT_BODY: ${{ github.event.comment.body }}
          GH_COMMENT_ID: ${{ github.event.comment.id }}
          GH_ACTOR: ${{ github.actor }}
        with:
          script: |
            const core = require('@actions/core');

            // -------- Config
            const BOT_HANDLE = process.env.BOT_HANDLE || "@bot";
            const BASE = (process.env.TASKS_BASE_URL || "").replace(/\/+$/, "");
            const TOKEN = process.env.TASKS_API_TOKEN;

            const PATHS = {
              list:  process.env.TASKS_LIST_PATH  || "/tasks",
              add:   process.env.TASKS_ADD_PATH   || "/tasks",
              done:  process.env.TASKS_DONE_PATH  || "/tasks/{id}",
              del:   process.env.TASKS_DELETE_PATH|| "/tasks/{id}",
            };

            const issueNumber = process.env.GH_ISSUE_NUMBER || (context.payload.issue && context.payload.issue.number);
            const issueUrl = context.payload.issue && context.payload.issue.html_url;
            const repo = process.env.GH_REPO || `${context.repo.owner}/${context.repo.repo}`;
            const commentBody = process.env.GH_COMMENT_BODY || "";
            const hasIssue = !!issueNumber;

            // -------- HTTP util
            async function apiFetch(path, opts = {}) {
              if (!BASE) throw new Error("TASKS_BASE_URL manquant.");
              const url = `${BASE}${path}`;
              const headers = {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${TOKEN}`,
                "X-API-Token": TOKEN,
                ...(opts.headers || {})
              };
              const res = await fetch(url, { ...opts, headers });
              const text = await res.text();
              let data
